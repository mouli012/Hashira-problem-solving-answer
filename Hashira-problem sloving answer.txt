const fs = require("fs");


function charToValue(ch) {
  if (ch >= "0" && ch <= "9") {
    return parseInt(ch, 10);
  }
  return ch.toLowerCase().charCodeAt(0) - "a".charCodeAt(0) + 10;
}

function parseBigInt(valueStr, base) {
  let result = 0n;
  let baseBigInt = BigInt(base);
  for (let ch of valueStr) {
    result = result * baseBigInt + BigInt(charToValue(ch));
  }
  return result;
}

function lagrangeInterpolation(points, targetX = 0n) {
  let total = 0n;
  const k = points.length;

  for (let i = 0; i < k; i++) {
    let [xi, yi] = points[i];
    xi = BigInt(xi);
    yi = BigInt(yi);

    let num = 1n;
    let den = 1n;

    for (let j = 0; j < k; j++) {
      if (i !== j) {
        let [xj] = points[j];
        xj = BigInt(xj);
        num *= targetX - xj;
        den *= xi - xj;
      }
    }

    total += yi * num / den; // exact division
  }

  return total;
}

function solve(data) {
  const n = data.keys.n;
  const k = data.keys.k;

  let points = [];
  for (let key in data) {
    if (key === "keys") continue;
    let x = parseInt(key, 10);
    let base = parseInt(data[key].base, 10);
    let valueStr = data[key].value;
    let y = parseBigInt(valueStr, base);
    points.push([x, y]);
  }

  points.sort((a, b) => a[0] - b[0]);
  let chosenPoints = points.slice(0, k);

  let secret = lagrangeInterpolation(chosenPoints, 0n);
  return secret.toString();
}

const input = fs.readFileSync(0, "Input File"); 
const data = JSON.parse(input);
console.log(solve(data));
