const fs = require("fs");


function charToValue(ch) {
  if (ch >= "0" && ch <= "9") {
    return parseInt(ch, 10);
  }
  return ch.toLowerCase().charCodeAt(0) - "a".charCodeAt(0) + 10;
}

function parseBigInt(valueStr, base) {
  let result = 0n;
  let baseBigInt = BigInt(base);
  for (let ch of valueStr) {
    result = result * baseBigInt + BigInt(charToValue(ch));
  }
  return result;
}

function lagrangeInterpolation(points, targetX = 0n) {
  let total = 0n;
  const k = points.length;

  for (let i = 0; i < k; i++) {
    let [xi, yi] = points[i];
    xi = BigInt(xi);
    yi = BigInt(yi);

    let num = 1n;
    let den = 1n;

    for (let j = 0; j < k; j++) {
      if (i !== j) {
        let [xj] = points[j];
        xj = BigInt(xj);
        num *= targetX - xj;
        den *= xi - xj;
      }
    }

    total += yi * num / den; // exact division
  }

  return total;
}

function solve(data) {
  const n = data.keys.n;
  const k = data.keys.k;

  let points = [];
  for (let key in data) {
    if (key === "keys") continue;
    let x = parseInt(key, 10);
    let base = parseInt(data[key].base, 10);
    let valueStr = data[key].value;
    let y = parseBigInt(valueStr, base);
    points.push([x, y]);
  }

  points.sort((a, b) => a[0] - b[0]);
  let chosenPoints = points.slice(0, k);

  let secret = lagrangeInterpolation(chosenPoints, 0n);
  return secret.toString();
}

const input = fs.readFileSync(0, "Input File"); 
const data = JSON.parse(input);
console.log(solve(data));

sample test case1:
{
    "keys": {
        "n": 4,
        "k": 3
    },
    "1": {
        "base": "10",
        "value": "4"
    },
    "2": {
        "base": "2",
        "value": "111"
    },
    "3": {
        "base": "10",
        "value": "12"
    },
    "6": {
        "base": "4",
        "value": "213"
    }
}
Out put for sample test case 1 : 3


Test case 2:
{
"keys": {
    "n": 10,
    "k": 7
  },
  "1": {
    "base": "6",
    "value": "13444211440455345511"
  },
  "2": {
    "base": "15",
    "value": "aed7015a346d635"
  },
  "3": {
    "base": "15",
    "value": "6aeeb69631c227c"
  },
  "4": {
    "base": "16",
    "value": "e1b5e05623d881f"
  },
  "5": {
    "base": "8",
    "value": "316034514573652620673"
  },
  "6": {
    "base": "3",
    "value": "2122212201122002221120200210011020220200"
  },
  "7": {
    "base": "3",
    "value": "20120221122211000100210021102001201112121"
  },
  "8": {
    "base": "6",
    "value": "20220554335330240002224253"
  },
  "9": {
    "base": "12",
    "value": "45153788322a1255483"
  },
  "10": {
    "base": "7",
    "value": "1101613130313526312514143"
  }
}

Output for the second test case is: 12345678901234567890
